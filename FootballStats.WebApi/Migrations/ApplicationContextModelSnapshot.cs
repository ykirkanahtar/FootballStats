// <auto-generated />
using System;
using FootballStats.WebApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace FootballStats.WebApi.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.0-preview2-30571");

            modelBuilder.Entity("CustomFramework.WebApiUtils.Authorization.Models.Claim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnName("create_date_time");

                    b.Property<int>("CustomClaim")
                        .HasColumnName("custom_claim");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnName("delete_date_time");

                    b.Property<int>("Status")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnName("update_date_time");

                    b.HasKey("Id")
                        .HasName("pk_claims");

                    b.ToTable("claims");
                });

            modelBuilder.Entity("CustomFramework.WebApiUtils.Authorization.Models.ClientApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("ClientApplicationCode")
                        .IsRequired()
                        .HasColumnName("client_application_code")
                        .HasMaxLength(6);

                    b.Property<string>("ClientApplicationName")
                        .IsRequired()
                        .HasColumnName("client_application_name")
                        .HasMaxLength(20);

                    b.Property<string>("ClientApplicationPassword")
                        .IsRequired()
                        .HasColumnName("client_application_password")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnName("create_date_time");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnName("delete_date_time");

                    b.Property<int>("Status")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnName("update_date_time");

                    b.HasKey("Id")
                        .HasName("pk_client_applications");

                    b.ToTable("client_applications");

                    b.HasData(
                        new { Id = 1, ClientApplicationCode = "web", ClientApplicationName = "web", ClientApplicationPassword = "MEEW64IB6P6QJraD945T4m+C0Nb4sf8x6bwhYLzaxPU=", CreateDateTime = new DateTime(2018, 4, 18, 17, 49, 20, 893, DateTimeKind.Local), Status = 1 }
                    );
                });

            modelBuilder.Entity("CustomFramework.WebApiUtils.Authorization.Models.ClientApplicationUtil", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("ClientApplicationId")
                        .HasColumnName("client_application_id");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnName("create_date_time");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnName("delete_date_time");

                    b.Property<string>("SpecialValue")
                        .IsRequired()
                        .HasColumnName("special_value")
                        .HasMaxLength(100);

                    b.Property<int>("Status")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnName("update_date_time");

                    b.HasKey("Id")
                        .HasName("pk_client_application_utils");

                    b.HasIndex("ClientApplicationId")
                        .IsUnique()
                        .HasName("ix_client_application_utils_client_application_id");

                    b.ToTable("client_application_utils");

                    b.HasData(
                        new { Id = 1, ClientApplicationId = 1, CreateDateTime = new DateTime(2018, 4, 18, 17, 49, 20, 893, DateTimeKind.Local), SpecialValue = "4JtyaPZVGpJ4P20HnyMPZA==", Status = 1 }
                    );
                });

            modelBuilder.Entity("CustomFramework.WebApiUtils.Authorization.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnName("create_date_time");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnName("delete_date_time");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasMaxLength(255);

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnName("role_name")
                        .HasMaxLength(25);

                    b.Property<int>("Status")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnName("update_date_time");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.ToTable("roles");

                    b.HasData(
                        new { Id = 1, CreateDateTime = new DateTime(2018, 4, 18, 17, 49, 20, 894, DateTimeKind.Local), Description = "Administration Role", RoleName = "Administrator", Status = 1 },
                        new { Id = 2, CreateDateTime = new DateTime(2018, 4, 18, 17, 49, 20, 894, DateTimeKind.Local), Description = "Default User Role", RoleName = "NormalUser", Status = 1 },
                        new { Id = 3, CreateDateTime = new DateTime(2018, 4, 18, 17, 49, 20, 894, DateTimeKind.Local), Description = "User for data writer like stats", RoleName = "DataWriter", Status = 1 }
                    );
                });

            modelBuilder.Entity("CustomFramework.WebApiUtils.Authorization.Models.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("ClaimId")
                        .HasColumnName("claim_id");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnName("create_date_time");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnName("delete_date_time");

                    b.Property<int>("RoleId")
                        .HasColumnName("role_id");

                    b.Property<int>("Status")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnName("update_date_time");

                    b.HasKey("Id")
                        .HasName("pk_role_claims");

                    b.HasIndex("ClaimId")
                        .HasName("ix_role_claims_claim_id");

                    b.HasIndex("RoleId")
                        .HasName("ix_role_claims_role_id");

                    b.ToTable("role_claims");
                });

            modelBuilder.Entity("CustomFramework.WebApiUtils.Authorization.Models.RoleEntityClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<bool>("CanCreate")
                        .HasColumnName("can_create");

                    b.Property<bool>("CanDelete")
                        .HasColumnName("can_delete");

                    b.Property<bool>("CanSelect")
                        .HasColumnName("can_select");

                    b.Property<bool>("CanUpdate")
                        .HasColumnName("can_update");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnName("create_date_time");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnName("delete_date_time");

                    b.Property<string>("Entity")
                        .IsRequired()
                        .HasColumnName("entity")
                        .HasMaxLength(50);

                    b.Property<int>("RoleId")
                        .HasColumnName("role_id");

                    b.Property<int>("Status")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnName("update_date_time");

                    b.HasKey("Id")
                        .HasName("pk_role_entity_claims");

                    b.HasIndex("RoleId")
                        .HasName("ix_role_entity_claims_role_id");

                    b.ToTable("role_entity_claims");

                    b.HasData(
                        new { Id = 1, CanCreate = true, CanDelete = true, CanSelect = true, CanUpdate = true, CreateDateTime = new DateTime(2018, 4, 18, 17, 49, 20, 894, DateTimeKind.Local), Entity = "Claim", RoleId = 1, Status = 1 },
                        new { Id = 2, CanCreate = true, CanDelete = true, CanSelect = true, CanUpdate = true, CreateDateTime = new DateTime(2018, 4, 18, 17, 49, 20, 895, DateTimeKind.Local), Entity = "ClientApplicationUtil", RoleId = 1, Status = 1 },
                        new { Id = 3, CanCreate = true, CanDelete = true, CanSelect = true, CanUpdate = true, CreateDateTime = new DateTime(2018, 4, 18, 17, 49, 20, 895, DateTimeKind.Local), Entity = "ClientApplication", RoleId = 1, Status = 1 },
                        new { Id = 4, CanCreate = true, CanDelete = true, CanSelect = true, CanUpdate = true, CreateDateTime = new DateTime(2018, 4, 18, 17, 49, 20, 895, DateTimeKind.Local), Entity = "UserClaim", RoleId = 1, Status = 1 },
                        new { Id = 5, CanCreate = true, CanDelete = true, CanSelect = true, CanUpdate = true, CreateDateTime = new DateTime(2018, 4, 18, 17, 49, 20, 895, DateTimeKind.Local), Entity = "UserEntityClaim", RoleId = 1, Status = 1 },
                        new { Id = 6, CanCreate = true, CanDelete = true, CanSelect = true, CanUpdate = true, CreateDateTime = new DateTime(2018, 4, 18, 17, 49, 20, 895, DateTimeKind.Local), Entity = "UserRole", RoleId = 1, Status = 1 },
                        new { Id = 7, CanCreate = true, CanDelete = true, CanSelect = true, CanUpdate = true, CreateDateTime = new DateTime(2018, 4, 18, 17, 49, 20, 895, DateTimeKind.Local), Entity = "UserUtil", RoleId = 1, Status = 1 },
                        new { Id = 8, CanCreate = true, CanDelete = true, CanSelect = true, CanUpdate = true, CreateDateTime = new DateTime(2018, 4, 18, 17, 49, 20, 895, DateTimeKind.Local), Entity = "User", RoleId = 1, Status = 1 },
                        new { Id = 9, CanCreate = true, CanDelete = true, CanSelect = true, CanUpdate = true, CreateDateTime = new DateTime(2018, 4, 18, 17, 49, 20, 895, DateTimeKind.Local), Entity = "RoleClaim", RoleId = 1, Status = 1 },
                        new { Id = 10, CanCreate = true, CanDelete = true, CanSelect = true, CanUpdate = true, CreateDateTime = new DateTime(2018, 4, 18, 17, 49, 20, 895, DateTimeKind.Local), Entity = "RoleEntityClaim", RoleId = 1, Status = 1 },
                        new { Id = 11, CanCreate = true, CanDelete = true, CanSelect = true, CanUpdate = true, CreateDateTime = new DateTime(2018, 4, 18, 17, 49, 20, 895, DateTimeKind.Local), Entity = "Role", RoleId = 1, Status = 1 },
                        new { Id = 12, CanCreate = true, CanDelete = true, CanSelect = true, CanUpdate = true, CreateDateTime = new DateTime(2018, 4, 18, 17, 49, 20, 895, DateTimeKind.Local), Entity = "Match", RoleId = 1, Status = 1 },
                        new { Id = 13, CanCreate = true, CanDelete = true, CanSelect = true, CanUpdate = true, CreateDateTime = new DateTime(2018, 4, 18, 17, 49, 20, 895, DateTimeKind.Local), Entity = "Player", RoleId = 1, Status = 1 },
                        new { Id = 14, CanCreate = true, CanDelete = true, CanSelect = true, CanUpdate = true, CreateDateTime = new DateTime(2018, 4, 18, 17, 49, 20, 895, DateTimeKind.Local), Entity = "Stat", RoleId = 1, Status = 1 },
                        new { Id = 15, CanCreate = true, CanDelete = true, CanSelect = true, CanUpdate = true, CreateDateTime = new DateTime(2018, 4, 18, 17, 49, 20, 895, DateTimeKind.Local), Entity = "Team", RoleId = 1, Status = 1 },
                        new { Id = 16, CanCreate = true, CanDelete = false, CanSelect = true, CanUpdate = true, CreateDateTime = new DateTime(2018, 4, 18, 17, 49, 20, 895, DateTimeKind.Local), Entity = "Match", RoleId = 3, Status = 1 },
                        new { Id = 17, CanCreate = true, CanDelete = false, CanSelect = true, CanUpdate = true, CreateDateTime = new DateTime(2018, 4, 18, 17, 49, 20, 895, DateTimeKind.Local), Entity = "Team", RoleId = 3, Status = 1 },
                        new { Id = 18, CanCreate = true, CanDelete = false, CanSelect = true, CanUpdate = true, CreateDateTime = new DateTime(2018, 4, 18, 17, 49, 20, 895, DateTimeKind.Local), Entity = "Player", RoleId = 3, Status = 1 },
                        new { Id = 19, CanCreate = true, CanDelete = false, CanSelect = true, CanUpdate = true, CreateDateTime = new DateTime(2018, 4, 18, 17, 49, 20, 895, DateTimeKind.Local), Entity = "Stat", RoleId = 3, Status = 1 }
                    );
                });

            modelBuilder.Entity("CustomFramework.WebApiUtils.Authorization.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("access_failed_count")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnName("create_date_time");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnName("delete_date_time");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasMaxLength(100);

                    b.Property<string>("EmailConfirmCode")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("email_confirm_code")
                        .HasMaxLength(6)
                        .HasDefaultValue("993923");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnName("email_confirmed");

                    b.Property<bool>("Lockout")
                        .HasColumnName("lockout");

                    b.Property<DateTime?>("LockoutEndDateTime")
                        .HasColumnName("lockout_end_date_time")
                        .HasMaxLength(256);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("password")
                        .HasMaxLength(256);

                    b.Property<int>("Status")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnName("update_date_time");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnName("user_name")
                        .HasMaxLength(25);

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users");

                    b.HasData(
                        new { Id = 1, AccessFailedCount = 0, CreateDateTime = new DateTime(2018, 4, 18, 17, 49, 20, 891, DateTimeKind.Local), Email = "admin@admin.org", EmailConfirmCode = "9988", EmailConfirmed = false, Lockout = false, Password = "aTyxEm41cX0hP8tkocP3OHyF64srB399R0u7BxNnaZQ=", Status = 1, UserName = "admin" }
                    );
                });

            modelBuilder.Entity("CustomFramework.WebApiUtils.Authorization.Models.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("ClaimId")
                        .HasColumnName("claim_id");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnName("create_date_time");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnName("delete_date_time");

                    b.Property<int>("Status")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnName("update_date_time");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_claims");

                    b.HasIndex("ClaimId")
                        .HasName("ix_user_claims_claim_id");

                    b.HasIndex("UserId")
                        .HasName("ix_user_claims_user_id");

                    b.ToTable("user_claims");
                });

            modelBuilder.Entity("CustomFramework.WebApiUtils.Authorization.Models.UserEntityClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<bool>("CanCreate")
                        .HasColumnName("can_create");

                    b.Property<bool>("CanDelete")
                        .HasColumnName("can_delete");

                    b.Property<bool>("CanSelect")
                        .HasColumnName("can_select");

                    b.Property<bool>("CanUpdate")
                        .HasColumnName("can_update");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnName("create_date_time");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnName("delete_date_time");

                    b.Property<string>("Entity")
                        .IsRequired()
                        .HasColumnName("entity")
                        .HasMaxLength(50);

                    b.Property<int>("Status")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnName("update_date_time");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_entity_claims");

                    b.HasIndex("UserId")
                        .HasName("ix_user_entity_claims_user_id");

                    b.ToTable("user_entity_claims");
                });

            modelBuilder.Entity("CustomFramework.WebApiUtils.Authorization.Models.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnName("create_date_time");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnName("delete_date_time");

                    b.Property<int>("RoleId")
                        .HasColumnName("role_id");

                    b.Property<int>("Status")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnName("update_date_time");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_roles");

                    b.HasIndex("RoleId")
                        .HasName("ix_user_roles_role_id");

                    b.HasIndex("UserId")
                        .HasName("ix_user_roles_user_id");

                    b.ToTable("user_roles");

                    b.HasData(
                        new { Id = 1, CreateDateTime = new DateTime(2018, 4, 18, 17, 49, 20, 894, DateTimeKind.Local), RoleId = 1, Status = 1, UserId = 1 }
                    );
                });

            modelBuilder.Entity("CustomFramework.WebApiUtils.Authorization.Models.UserUtil", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnName("create_date_time");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnName("delete_date_time");

                    b.Property<string>("SpecialValue")
                        .IsRequired()
                        .HasColumnName("special_value")
                        .HasMaxLength(100);

                    b.Property<int>("Status")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnName("update_date_time");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_utils");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasName("ix_user_utils_user_id");

                    b.ToTable("user_utils");

                    b.HasData(
                        new { Id = 1, CreateDateTime = new DateTime(2018, 4, 18, 17, 49, 20, 892, DateTimeKind.Local), SpecialValue = "Jm8i5WuspfBnFUE3ssUYbQ==", Status = 1, UserId = 1 }
                    );
                });

            modelBuilder.Entity("FootballStats.WebApi.Models.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("AwayTeamId")
                        .HasColumnName("away_team_id");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnName("create_date_time");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnName("delete_date_time");

                    b.Property<int>("DurationInMinutes")
                        .HasColumnName("duration_in_minutes");

                    b.Property<int>("HomeTeamId")
                        .HasColumnName("home_team_id");

                    b.Property<DateTime>("MatchDate")
                        .HasColumnName("match_date");

                    b.Property<int>("Order")
                        .HasColumnName("order");

                    b.Property<int>("Status")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnName("update_date_time");

                    b.Property<string>("VideoLink")
                        .HasColumnName("video_link")
                        .HasMaxLength(100);

                    b.HasKey("Id")
                        .HasName("pk_matches");

                    b.HasIndex("AwayTeamId")
                        .HasName("ix_matches_away_team_id");

                    b.HasIndex("HomeTeamId")
                        .HasName("ix_matches_home_team_id");

                    b.HasIndex("MatchDate", "Order")
                        .IsUnique()
                        .HasName("ix_matches_match_date_order");

                    b.ToTable("matches");

                    b.HasData(
                        new { Id = 1, AwayTeamId = 2, CreateDateTime = new DateTime(2018, 4, 18, 17, 49, 20, 895, DateTimeKind.Local), DurationInMinutes = 60, HomeTeamId = 1, MatchDate = new DateTime(2018, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified), Order = 1, Status = 1, VideoLink = "http://sosyalhalisaha.com/mac-detay/1452182" }
                    );
                });

            modelBuilder.Entity("FootballStats.WebApi.Models.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnName("birth_date");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnName("create_date_time");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnName("delete_date_time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(25);

                    b.Property<int>("Status")
                        .HasColumnName("status");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnName("surname")
                        .HasMaxLength(25);

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnName("update_date_time");

                    b.HasKey("Id")
                        .HasName("pk_players");

                    b.ToTable("players");

                    b.HasData(
                        new { Id = 1, BirthDate = new DateTime(1982, 2, 14, 0, 0, 0, 0, DateTimeKind.Unspecified), CreateDateTime = new DateTime(2018, 4, 18, 17, 49, 20, 896, DateTimeKind.Local), Name = "Yunus Emre", Status = 1, Surname = "Kırkanahtar" },
                        new { Id = 2, BirthDate = new DateTime(1974, 11, 6, 0, 0, 0, 0, DateTimeKind.Unspecified), CreateDateTime = new DateTime(2018, 4, 18, 17, 49, 20, 896, DateTimeKind.Local), Name = "Mithat", Status = 1, Surname = "Gerede" },
                        new { Id = 3, BirthDate = new DateTime(1988, 10, 16, 0, 0, 0, 0, DateTimeKind.Unspecified), CreateDateTime = new DateTime(2018, 4, 18, 17, 49, 20, 896, DateTimeKind.Local), Name = "Aytaç", Status = 1, Surname = "Tongel" },
                        new { Id = 4, BirthDate = new DateTime(1989, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified), CreateDateTime = new DateTime(2018, 4, 18, 17, 49, 20, 896, DateTimeKind.Local), Name = "Hakan", Status = 1, Surname = "Çavdar" },
                        new { Id = 5, BirthDate = new DateTime(1989, 12, 17, 0, 0, 0, 0, DateTimeKind.Unspecified), CreateDateTime = new DateTime(2018, 4, 18, 17, 49, 20, 896, DateTimeKind.Local), Name = "Cihat", Status = 1, Surname = "Manav" },
                        new { Id = 6, BirthDate = new DateTime(1983, 8, 16, 0, 0, 0, 0, DateTimeKind.Unspecified), CreateDateTime = new DateTime(2018, 4, 18, 17, 49, 20, 896, DateTimeKind.Local), Name = "Görkem", Status = 1, Surname = "Güngör" },
                        new { Id = 7, BirthDate = new DateTime(1988, 8, 14, 0, 0, 0, 0, DateTimeKind.Unspecified), CreateDateTime = new DateTime(2018, 4, 18, 17, 49, 20, 896, DateTimeKind.Local), Name = "Emir", Status = 1, Surname = "Cevahiroğlu" },
                        new { Id = 8, BirthDate = new DateTime(1991, 11, 6, 0, 0, 0, 0, DateTimeKind.Unspecified), CreateDateTime = new DateTime(2018, 4, 18, 17, 49, 20, 896, DateTimeKind.Local), Name = "Sabri", Status = 1, Surname = "Öksüz" }
                    );
                });

            modelBuilder.Entity("FootballStats.WebApi.Models.Stat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<decimal>("Assist")
                        .HasColumnName("assist")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnName("create_date_time");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnName("delete_date_time");

                    b.Property<decimal>("Goal")
                        .HasColumnName("goal")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("MatchId")
                        .HasColumnName("match_id");

                    b.Property<decimal>("MissedPenalty")
                        .HasColumnName("missed_penalty")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("OwnGoal")
                        .HasColumnName("own_goal")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("PenaltyScore")
                        .HasColumnName("penalty_score")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("PlayerId")
                        .HasColumnName("player_id");

                    b.Property<int>("Status")
                        .HasColumnName("status");

                    b.Property<int>("TeamId")
                        .HasColumnName("team_id");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnName("update_date_time");

                    b.HasKey("Id")
                        .HasName("pk_stats");

                    b.HasIndex("PlayerId")
                        .HasName("ix_stats_player_id");

                    b.HasIndex("TeamId")
                        .HasName("ix_stats_team_id");

                    b.HasIndex("MatchId", "PlayerId", "TeamId")
                        .IsUnique()
                        .HasName("ix_stats_match_id_player_id_team_id");

                    b.ToTable("stats");

                    b.HasData(
                        new { Id = 1, Assist = 0m, CreateDateTime = new DateTime(2018, 4, 18, 17, 49, 20, 896, DateTimeKind.Local), Goal = 8m, MatchId = 1, MissedPenalty = 0m, OwnGoal = 0m, PenaltyScore = 0m, PlayerId = 3, Status = 1, TeamId = 1 },
                        new { Id = 2, Assist = 3m, CreateDateTime = new DateTime(2018, 4, 18, 17, 49, 20, 896, DateTimeKind.Local), Goal = 5m, MatchId = 1, MissedPenalty = 0m, OwnGoal = 0m, PenaltyScore = 0m, PlayerId = 6, Status = 1, TeamId = 1 },
                        new { Id = 3, Assist = 5m, CreateDateTime = new DateTime(2018, 4, 18, 17, 49, 20, 896, DateTimeKind.Local), Goal = 2m, MatchId = 1, MissedPenalty = 0m, OwnGoal = 0m, PenaltyScore = 0m, PlayerId = 7, Status = 1, TeamId = 1 },
                        new { Id = 4, Assist = 2m, CreateDateTime = new DateTime(2018, 4, 18, 17, 49, 20, 896, DateTimeKind.Local), Goal = 1m, MatchId = 1, MissedPenalty = 0m, OwnGoal = 0m, PenaltyScore = 0m, PlayerId = 8, Status = 1, TeamId = 1 },
                        new { Id = 5, Assist = 2m, CreateDateTime = new DateTime(2018, 4, 18, 17, 49, 20, 896, DateTimeKind.Local), Goal = 7m, MatchId = 1, MissedPenalty = 0m, OwnGoal = 0m, PenaltyScore = 0m, PlayerId = 2, Status = 1, TeamId = 2 },
                        new { Id = 6, Assist = 2m, CreateDateTime = new DateTime(2018, 4, 18, 17, 49, 20, 896, DateTimeKind.Local), Goal = 4m, MatchId = 1, MissedPenalty = 0m, OwnGoal = 0m, PenaltyScore = 0m, PlayerId = 4, Status = 1, TeamId = 2 },
                        new { Id = 7, Assist = 5m, CreateDateTime = new DateTime(2018, 4, 18, 17, 49, 20, 896, DateTimeKind.Local), Goal = 2m, MatchId = 1, MissedPenalty = 0m, OwnGoal = 1m, PenaltyScore = 0m, PlayerId = 5, Status = 1, TeamId = 2 },
                        new { Id = 8, Assist = 3m, CreateDateTime = new DateTime(2018, 4, 18, 17, 49, 20, 896, DateTimeKind.Local), Goal = 2m, MatchId = 1, MissedPenalty = 0m, OwnGoal = 0m, PenaltyScore = 0m, PlayerId = 1, Status = 1, TeamId = 2 }
                    );
                });

            modelBuilder.Entity("FootballStats.WebApi.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnName("color")
                        .HasMaxLength(25);

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnName("create_date_time");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnName("delete_date_time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(25);

                    b.Property<int>("Status")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnName("update_date_time");

                    b.HasKey("Id")
                        .HasName("pk_teams");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("ix_teams_name");

                    b.ToTable("teams");

                    b.HasData(
                        new { Id = 1, Color = "Red-White-Blue", CreateDateTime = new DateTime(2018, 4, 18, 17, 49, 20, 895, DateTimeKind.Local), Name = "Atletico New Village FC", Status = 1 },
                        new { Id = 2, Color = "Yellow-Black", CreateDateTime = new DateTime(2018, 4, 18, 17, 49, 20, 895, DateTimeKind.Local), Name = "Dortmund New Village FC", Status = 1 }
                    );
                });

            modelBuilder.Entity("CustomFramework.WebApiUtils.Authorization.Models.ClientApplicationUtil", b =>
                {
                    b.HasOne("CustomFramework.WebApiUtils.Authorization.Models.ClientApplication", "ClientApplication")
                        .WithOne("ClientApplicationUtil")
                        .HasForeignKey("CustomFramework.WebApiUtils.Authorization.Models.ClientApplicationUtil", "ClientApplicationId")
                        .HasConstraintName("fk_client_application_utils_client_applications_client_applica~")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CustomFramework.WebApiUtils.Authorization.Models.RoleClaim", b =>
                {
                    b.HasOne("CustomFramework.WebApiUtils.Authorization.Models.Claim", "Claim")
                        .WithMany("RoleClaims")
                        .HasForeignKey("ClaimId")
                        .HasConstraintName("fk_role_claims_claims_claim_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CustomFramework.WebApiUtils.Authorization.Models.Role", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_role_claims_roles_role_id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CustomFramework.WebApiUtils.Authorization.Models.RoleEntityClaim", b =>
                {
                    b.HasOne("CustomFramework.WebApiUtils.Authorization.Models.Role", "Role")
                        .WithMany("RoleEntityClaims")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_role_entity_claims_roles_role_id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CustomFramework.WebApiUtils.Authorization.Models.UserClaim", b =>
                {
                    b.HasOne("CustomFramework.WebApiUtils.Authorization.Models.Claim", "Claim")
                        .WithMany("UserClaims")
                        .HasForeignKey("ClaimId")
                        .HasConstraintName("fk_user_claims_claims_claim_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CustomFramework.WebApiUtils.Authorization.Models.User", "User")
                        .WithMany("UserClaims")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_claims_users_user_id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CustomFramework.WebApiUtils.Authorization.Models.UserEntityClaim", b =>
                {
                    b.HasOne("CustomFramework.WebApiUtils.Authorization.Models.User", "User")
                        .WithMany("UserEntityClaims")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_entity_claims_users_user_id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CustomFramework.WebApiUtils.Authorization.Models.UserRole", b =>
                {
                    b.HasOne("CustomFramework.WebApiUtils.Authorization.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_user_roles_roles_role_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CustomFramework.WebApiUtils.Authorization.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_roles_users_user_id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CustomFramework.WebApiUtils.Authorization.Models.UserUtil", b =>
                {
                    b.HasOne("CustomFramework.WebApiUtils.Authorization.Models.User", "User")
                        .WithOne("UserUtil")
                        .HasForeignKey("CustomFramework.WebApiUtils.Authorization.Models.UserUtil", "UserId")
                        .HasConstraintName("fk_user_utils_users_user_id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FootballStats.WebApi.Models.Match", b =>
                {
                    b.HasOne("FootballStats.WebApi.Models.Team", "AwayTeam")
                        .WithMany("AwayMatches")
                        .HasForeignKey("AwayTeamId")
                        .HasConstraintName("fk_matches_teams_away_team_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FootballStats.WebApi.Models.Team", "HomeTeam")
                        .WithMany("HomeMatches")
                        .HasForeignKey("HomeTeamId")
                        .HasConstraintName("fk_matches_teams_home_team_id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FootballStats.WebApi.Models.Stat", b =>
                {
                    b.HasOne("FootballStats.WebApi.Models.Match", "Match")
                        .WithMany("Stats")
                        .HasForeignKey("MatchId")
                        .HasConstraintName("fk_stats_matches_match_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FootballStats.WebApi.Models.Player", "Player")
                        .WithMany("Stats")
                        .HasForeignKey("PlayerId")
                        .HasConstraintName("fk_stats_players_player_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FootballStats.WebApi.Models.Team", "Team")
                        .WithMany("Stats")
                        .HasForeignKey("TeamId")
                        .HasConstraintName("fk_stats_teams_team_id")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
